<?php
/**
 * @file
 * Main file for the HybridAuth module.
 */

/**
 * Implements hook_hook_info().
 */

include "mailchimp.helper.inc";
include "mailchimp/src/Mailchimp.php";

function hybridauth_hook_info()
{
    $hooks = array(
        'hybridauth_username_alter',
        'hybridauth_profile_alter',
        'hybridauth_registration_form',
        'hybridauth_userinfo_alter',
    );

    return array_fill_keys($hooks, array('group' => 'hybridauth'));
}

/**
 * Implements hook_permission().
 */
function hybridauth_permission()
{
    $permissions = array(
        'use hybridauth' => array(
            'title'       => t('Use HybridAuth'),
            'description' => t('Login through HybridAuth, manage own HybridAuth identities.'),
        ),
    );
    return $permissions;
}

/**
 * Implements hook_menu().
 */
function hybridauth_menu()
{
    $items                                              = array();
    $items['bienvenida']                                = array(
        'title'            => 'Bienvenid@ a Garuyo',
        //'type' => MENU_CALLBACK,
        'page callback'    => 'imx_welcome',
        'access callback'  => TRUE,
        'access arguments' => array('access content'),
    );
    $items['admin/config/people/hybridauth']            = array(
        'title'            => 'HybridAuth',
        'description'      => 'Manage HybridAuth social sign-on settings.',
        'page callback'    => 'drupal_get_form',
        'page arguments'   => array('hybridauth_admin_settings'),
        'access arguments' => array('administer site configuration'),
        'file'             => 'hybridauth.admin.inc',
    );
    $items['admin/config/people/hybridauth/provider/%'] = array(
        'title callback'   => 'hybridauth_get_provider_name',
        'title arguments'  => array(5),
        'page callback'    => 'drupal_get_form',
        'page arguments'   => array('hybridauth_admin_provider_settings', 5),
        'access arguments' => array('administer site configuration'),
        'file'             => 'hybridauth.admin.inc',
    );
    $items['admin/reports/hybridauth']                  = array(
        'title'            => 'HybridAuth identities',
        'description'      => 'View HybridAuth identities counts grouped by authentication provider.',
        'page callback'    => 'drupal_get_form',
        'page arguments'   => array('hybridauth_report'),
        'access arguments' => array('access site reports'),
        'file'             => 'hybridauth.admin.inc',
        'type'             => MENU_NORMAL_ITEM,
    );

    $items['hybridauth/ajaxFBLogin']               = array(
        'page callback'   => 'fb_ajax_login',
        'access callback' => TRUE,
        'type'            => MENU_CALLBACK,
    );

    $items['hybridauth/endpoint']               = array(
        'page callback'   => 'hybridauth_endpoint',
        'access callback' => TRUE,
        'file'            => 'hybridauth.pages.inc',
        'type'            => MENU_CALLBACK,
    );
    $items['hybridauth/window/%']               = array(
        'page callback'   => 'hybridauth_window_start',
        'page arguments'  => array(2),
        'access callback' => TRUE,
        'file'            => 'hybridauth.pages.inc',
        'type'            => MENU_CALLBACK,
    );
    $items['hybridauth/providers/%ctools_js/%'] = array(
        'page callback'   => 'hybridauth_providers',
        'page arguments'  => array(2, 3),
        'access callback' => TRUE,
        'file'            => 'hybridauth.pages.inc',
        'type'            => MENU_CALLBACK,
    );

    $items['user/%user/hybridauth']        = array(
        'title'            => 'Mis cuentas sociales',
        'page callback'    => 'drupal_get_form',
        'page arguments'   => array('hybridauth_user_identity', 1),
        'access callback'  => 'user_edit_access',
        'access arguments' => array(1),
        'file'             => 'hybridauth.pages.inc',
        'type'             => MENU_LOCAL_TASK,
    );
    $items['user/%user/hybridauth/delete'] = array(
        'title'            => 'Delete HybridAuth identity',
        'page callback'    => 'drupal_get_form',
        'page arguments'   => array('hybridauth_user_identity_delete', 1, 4),
        'access callback'  => 'user_edit_access',
        'access arguments' => array(1),
        'file'             => 'hybridauth.pages.inc',
        'type'             => MENU_CALLBACK,
    );
    $items['hybridtauth/login/popup'] = array(
      'title' => 'Register form', //page title
      'description' => 'Register form',
      'page callback' => 'get_login_popup', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
      'page arguments' => array(), //put the name of the form here
      'access callback' => TRUE
    );
    $items['hybridtauth/register/popup'] = array(
      'title' => 'Register form', //page title
      'description' => 'Register form',
      'page callback' => 'get_register_popup', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
      'page arguments' => array(), //put the name of the form here
      'access callback' => TRUE
    );
    $items['hybridtauth/password/popup'] = array(
      'title' => 'Register form', //page title
      'description' => 'Register form',
      'page callback' => 'get_lost_password_popup', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
      'page arguments' => array(), //put the name of the form here
      'access callback' => TRUE
    );
    $items['hybridtauth/instruccion/popup'] = array(
      'title' => 'Register form', //page title
      'description' => 'Instrucciones Favorito',
      'page callback' => 'get_instruccion_favorito', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
      'page arguments' => array(), //put the name of the form here
      'access callback' => TRUE
    );

    return $items;
}

/**
 * Implements hook_block_info().
 */
function hybridauth_block_info()
{
    $blocks['hybridauth']['info']           = t('User login - HybridAuth widget only');
    $blocks['hybridauth-autologin-fb-message']['info'] = t('User Auto login Message - HybridAuth');
    $blocks['hybridauth_login']['info']     = t('User login form + HybridAuth');
    $blocks['hybridauth_login_boletin']['info']     = t('User login form boletin + HybridAuth');
    $blocks['hybridauth_register']['info']  = t('User register form + HybridAuth');
    $blocks['hybridauth_welcome']['info']   = t('Bloque de bienvenida HybridAuth');

    return $blocks;
}

/**
 * Implements hook_block_view().
 */
function hybridauth_block_view($delta = '')
{
    if ($delta == 'hybridauth' && !user_is_logged_in()) {
        $block            = array();
        $block['subject'] = t('User login');
        $element['#type'] = 'hybridauth_widget';
        $block['content'] = drupal_render($element);
    }


    if ($delta == 'hybridauth-autologin-fb-message' && user_is_logged_in()) {
        $block            = array();
        $block['subject'] = t('User autologin FB login Message');
        $block['content'] = get_hybrid_autologin_message();
        return $block;
    }

    if ($delta == 'hybridauth_login' && !user_is_logged_in()) {
        $block['subject'] = t('User login form + HybridAuth');
        $block['content'] = array(
            '#theme' => 'hybridauth_login'
        );
    };

    if ($delta == 'hybridauth_login_boletin' && !user_is_logged_in()) {
        $block['subject'] = t('User login form Boletin + HybridAuth');
        $block['content'] = array(
            '#theme' => 'hybridauth_login_boletin'
        );
    };

    if ($delta == 'hybridauth_register' && !user_is_logged_in()) {
        $block['subject'] = t('User register form + HybridAuth');
        $block['content'] = array(
            '#theme' => 'hybridauth_register'
        );
    };
    if ($delta == 'hybridauth_welcome' && user_is_logged_in()) {
        $block['subject'] = t('Bloque de bienvenida HybridAuth');
        $block['content'] = array(
            '#theme' => 'hybridauth_welcome'
        );
    };
    return $block;
}


function fb_ajax_login()
{
    if(!user_is_logged_in()){
        $fb_id=$_POST["fb_id"];
        $data=array("provider"=>"Facebook","identifier"=>$fb_id);
        $user_hybrid=_hybridauth_identity_load($data);
        if($user_hybrid){
            $_SESSION['hybridauth_session'] = TRUE;
            $_SESSION['hybridauth_auto_login_message'] = TRUE;

            $form_state['uid'] = $user_hybrid["uid"];
            user_login_submit(array(), $form_state);
            // Invoke hybridauth_user_login rules event.
            drupal_json_output(true);
        }else{
            drupal_json_output(false);
        }
    }
}

function get_hybrid_autologin_message(){
    $html="";
    if($_SESSION['hybridauth_auto_login_message']){
        drupal_set_message("has sido logueado automaticamente");
        $_SESSION['hybridauth_auto_login_message'] = false;
        return theme("hybridauth-autologin-fb-message",array());
    }
    return false;

}

/**
 * Implements hook_user_login().
 */
function hybridauth_user_login(&$edit, $account)
{
    if ($hybridauth_session_data = _hybridauth_session_load_by_uid($account->uid)) {
        if ($hybridauth = hybridauth_get_instance()) {
            if (is_object($hybridauth)) {
                $hybridauth_session_data         = $hybridauth_session_data['data'];
                $hybridauth_session_data_current = unserialize($hybridauth->getSessionData());
                if (is_array($hybridauth_session_data_current)) {
                    $hybridauth_session_data = serialize(array_merge(unserialize($hybridauth_session_data), $hybridauth_session_data_current));
                }
                // Call Hybrid_Auth::restoreSessionData() to set stored data.
                $hybridauth->restoreSessionData($hybridauth_session_data);
            }
        }
    }
}

/**
 * Implements hook_user_logout().
 */
function hybridauth_user_logout($account)
{
    // Try to get HybridAuth instance.
    if ($hybridauth = hybridauth_get_instance()) {
        if (is_object($hybridauth)) {
            // Call Hybrid_Auth::getSessionData() to get stored data.
            if ($hybridauth_session_data = $hybridauth->getSessionData()) {
                _hybridauth_session_save($hybridauth_session_data, $account->uid);
            }
        }
    }
}

/**
 * Implements hook_user_delete().
 */
function hybridauth_user_delete($account)
{
    _hybridauth_identity_delete_by_uid($account->uid);
    _hybridauth_session_delete_by_uid($account->uid);
}

/**
 * Implements hook_user_cancel().
 */
/*function hybridauth_user_cancel($edit, $account, $method) {
  if (in_array($method, array('user_cancel_reassign', 'user_cancel_delete'))) {
    _hybridauth_identity_delete_by_uid($account->uid);
  }
}*/

/**
 * Implements hook_form_alter().
 */
function hybridauth_form_alter(&$form, &$form_state, $form_id)
{
    _hybridauth_form_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hybridauth_form_comment_form_alter(&$form, &$form_state, $form_id)
{
    _hybridauth_form_alter($form, $form_state, 'comment_form');
}

/**
 * Adds HybridAuth widget to enabled forms.
 */
function _hybridauth_form_alter(&$form, &$form_state, $form_id)
{
    if (user_access('use hybridauth') && user_is_anonymous() &&
        in_array($form_id, array_filter(variable_get('hybridauth_forms', array('user_login', 'user_login_block'))))
    ) {
        $form['hybridauth'] = array(
            '#type' => 'hybridauth_widget',
        );


    }

    
    
    if($form_id=="user_login" || $form_id=="user_login_block" || $form_id=="user_register_form"){
    $last_section_cookie=  json_decode($_COOKIE["last_section"]);    
        $form['#redirect'] = ($last_section_cookie->last_section)? $last_section_cookie->last_section :'inicio';
        $form['#submit'][] = 'hybridauth_user_login_redirect';
        $form_state['redirect'] =($last_section_cookie->last_section)?$last_section_cookie->last_section : 'inicio';
    }
}

function hybridauth_user_login_redirect($form, &$form_state) {
    $last_section_cookie=  json_decode($_COOKIE["last_section"]);
    $form_state['redirect'] =($last_section_cookie->last_section)?$last_section_cookie->last_section: 'inicio';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hybridauth_form_user_profile_form_alter(&$form, &$form_state, $form_id)
{
    /*
    if ($form['#user_category'] == 'account' && !empty($form['#user']->data['hybridauth'])) {
        if ($form['account']['name']['#access'] && variable_get('hybridauth_disable_username_change', 1)) {
            $form['account']['name']['#access'] = FALSE;
        }
        if (variable_get('hybridauth_remove_password_fields', 1)) {
            $form['#validate'] = array_filter($form['#validate'], 'hybridauth_user_profile_form_validate_filter');
            unset($form['account']['pass']);
            unset($form['account']['current_pass']);
            unset($form['account']['current_pass_required_values']);
        }
    }
    */
}

/**
 * Helper function to remove password validation function.
 */
function hybridauth_user_profile_form_validate_filter($value)
{
    return !($value == 'user_validate_current_pass');
}

/**
 * Implements hook_element_info().
 */
function hybridauth_element_info()
{
    $last_section_cookie=  json_decode($_COOKIE["last_section"]);
    $types = array();
    $types['hybridauth_widget'] = array(
        '#input'                         => FALSE,
        '#theme'                         => 'hybridauth_widget',
        // '#theme_wrappers' => array('form_element'),
        '#hybridauth_id'                 => 'hybridauth',
        '#title'                         => variable_get('hybridauth_widget_title', 'Or log in with...'),
        '#weight'                        => variable_get('hybridauth_widget_weight', 100),
        '#hybridauth_window_type'        => variable_get('hybridauth_window_type', 'current'),
        '#hybridauth_widget_type'        => variable_get('hybridauth_widget_type', 'list'),
        '#hybridauth_widget_use_overlay' => variable_get('hybridauth_widget_use_overlay', 1),
        '#hybridauth_widget_link_text'   => variable_get('hybridauth_widget_link_text', 'Social network account'),
        '#hybridauth_widget_link_title'  => variable_get('hybridauth_widget_link_title', 'Social network account'),
        '#hybridauth_widget_icon_pack'   => variable_get('hybridauth_widget_icon_pack', 'hybridauth_32'),
        '#hybridauth_destination'        => ($last_section_cookie->last_section) ? $last_section_cookie->last_section :variable_get('hybridauth_destination', ''),
        '#hybridauth_onclick'            => '',
        '#attached'                      => array(
            'js'  => array(
                drupal_get_path('module', 'hybridauth') . '/js/hybridauth.js' => array(
                    'type' => 'file',
                ),
            ),
            'css' => array(
                drupal_get_path('module', 'hybridauth') . '/css/hybridauth.css' => array(
                    'type' => 'file',
                ),
            ),
        ),
    );

    return $types;
}

/**
 * Implements hook_theme().
 */
function hybridauth_theme($existing, $type, $theme, $path)
{
    return array(
        'hybridauth_admin_settings_providers_table' => array(
            'render element' => 'form',
            'file'           => 'hybridauth.admin.inc',
        ),
        'hybridauth_widget'                         => array(
            'render element' => 'element',
            'template'       => 'templates/hybridauth_widget',
            'file'           => 'hybridauth.theme.inc',
        ),
        'imx_welcome'                               => array(
            'variables' => array(
                'data' => NULL,
            ),
            'template'  => 'templates/imx_welcome',
        ),
        'hybridauth_login'                          => array(
            'variables' => array(
                'items_hybridauth_login' => NULL,
            ),
            'template'  => 'templates/hybridauth_login',
        ),
        'hybridauth_register'                       => array(
            'variables' => array(
                'items_hybridauth_register' => NULL,
            ),
            'template'  => 'templates/hybridauth_register',
        ),
        'hybridauth_welcome'                        => array(
            'variables' => array(
                'items_hybridauth_welcome' => NULL,
            ),
            'template'  => 'templates/hybridauth_welcome',
        ),
        'hybridauth-autologin-fb-message'                        => array(
            'variables' => array(
                'hybridauth-autologin-fb-message' => NULL,
            ),
            'template'  => 'templates/hybridauth-autologin-fb-message',
        ),
        'hybridauth_provider_icon'                  => array(
            'variables' => array(
                'icon_pack'     => 'hybridauth_32',
                'provider_id'   => NULL,
                'provider_name' => NULL,
            ),
            'template'  => 'templates/hybridauth_provider_icon',
            'file'      => 'hybridauth.theme.inc',
        ),
        'hybridauth_additional_info_form'           => array(
            'template'       => 'templates/imx_register_finish',
            'render element' => 'form',
            'file'           => 'hybridauth.pages.inc',
        ),
    );
}

/**
 * Implements hook_username_alter().
 */
function hybridauth_username_alter(&$name, $account)
{
    // Don't alter anonymous users or objects that do not have any user ID.
    if (empty($account->uid)) {
        return;
    }

    $account2 = user_load($account->uid);
    if (!empty($account2->data['hybridauth']) && !module_exists('realname')) {
        $hybridauth_pattern = variable_get('hybridauth_display_name', '[user:hybridauth:firstName] [user:hybridauth:lastName]');
        $pattern            = str_replace('[user:name]', $account2->name, $hybridauth_pattern);
        $hybridauth_name    = token_replace($pattern, array('user' => $account2), array('clear' => TRUE));
        $name               = trim(strip_tags($hybridauth_name));
    }
}

/**
 * Implements hook_realname_alter().
 */
function hybridauth_realname_alter(&$realname, $account)
{
    if (!empty($account->data['hybridauth']) && variable_get('hybridauth_override_realname', 0)) {
        $hybridauth_pattern = variable_get('hybridauth_display_name', '[user:hybridauth:firstName] [user:hybridauth:lastName]');
        $pattern            = str_replace('[user:name]', $realname, $hybridauth_pattern);
        $hybridauth_name    = token_replace($pattern, array('user' => $account), array('clear' => TRUE));
        $realname           = trim(strip_tags($hybridauth_name));
    }
}

/**
 * Implements hook_page_alter().
 */
function hybridauth_page_alter(&$page)
{
    // Destroy the session of anonymous user if it was started by HybridAuth.
    if (!user_is_logged_in() && isset($_SESSION) && array_key_exists('hybridauth_session', $_SESSION)) {
        if ($_SESSION['hybridauth_session']) {
            // Set this to FALSE first time so that we can show Drupal messages.
            $_SESSION['hybridauth_session'] = FALSE;
        } else {
            // Destroy the session.
            session_destroy();
        }
    }
}

/**
 * Implements hook_field_extra_fields().
 */
function hybridauth_field_extra_fields()
{
    $extra['user']['user']['display'] = array(
        'hybridauth_identities' => array(
            'label'       => t('HybridAuth identities'),
            'description' => t('HybridAuth identities.'),
            'weight'      => 10,
        ),
    );

    return $extra;
}

/**
 * Implements hook_user_view().
 */
function hybridauth_user_view($account, $view_mode, $langcode)
{
    $identities = _hybridauth_identity_load_by_uid($account->uid);
    $providers  = hybridauth_providers_list();

    $header     = array(t('Authentication provider'), t('Identity'));
    $rows       = array();
    $data_array = array();
    foreach ($identities as $identity) {
        $data         = unserialize($identity['data']);
        $data_array[] = $data;
        $rows[]       = array(
            $providers[$data['provider']],
            l($data['profileURL'], $data['profileURL'], array('attributes' => array('target' => '_blank'), 'external' => TRUE)),
        );
    }

    $account->content['hybridauth_identities'] = array(
        '#type'   => 'item',
        '#title'  => t('HybridAuth identities'),
        '#theme'  => 'table',
        '#header' => $header,
        '#rows'   => $rows,
        '#sticky' => FALSE,
        '#empty'  => t('There are no connected identities.'),
    );
}

/**
 * Implements hook_ctools_plugin_type().
 */
function hybridauth_ctools_plugin_type()
{
    return array(
        'icon_pack' => array(
            // Themes can offer this plugin.
            'load themes' => TRUE,
        ),
    );
}

/**
 * Load metadata for a single icon pack without loading all icon packs.
 */
function hybridauth_get_icon_pack($name)
{
    ctools_include('plugins');
    return ctools_get_plugins('hybridauth', 'icon_pack', $name);
}

/**
 * Load metadata for all icon packs.
 */
function hybridauth_get_icon_packs()
{
    ctools_include('plugins');
    return ctools_get_plugins('hybridauth', 'icon_pack');
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function hybridauth_ctools_plugin_directory($module, $type)
{
    if ($module == 'hybridauth' && $type == 'icon_pack') {
        return 'plugins/icon_pack';
    }
}

/**
 * Implements hook_email_registration_name().
 */
function hybridauth_email_registration_name($edit, $account)
{
    global $_hybridauth_data;
    if (!empty($_hybridauth_data) || !empty($account->data['hybridauth'])) {
        return $account->name;
    }
    return NULL;
}

/**
 * Implements hook_robotstxt().
 */
function hybridauth_robotstxt()
{
    return array(
        '#HybridAuth paths',
        'Disallow: /hybridauth/',
        'Disallow: /?q=hybridauth/',
    );
}

/**
 * Internal functions.
 */
function hybridauth_providers_list()
{
    $providers = & drupal_static(__FUNCTION__, NULL);

    if (!isset($providers)) {
        $raw_providers = array(
            // Core providers.
            'AOL'           => t('AOL'),
            'Facebook'      => t('Facebook'),
            'Foursquare'    => t('Foursquare'),
            'Google'        => t('Google'),
            'LinkedIn'      => t('LinkedIn'),
            'Live'          => t('Windows Live'),
            'MySpace'       => t('MySpace'),
            'OpenID'        => t('OpenID'),
            'Twitter'       => t('Twitter'),
            'Yahoo'         => t('Yahoo'),
            // Additional providers.
            'px500'         => t('500px'),
            'Disqus'        => t('Disqus'),
            'FamilySearch'  => t('FamilySearch'),
            'Geni'          => t('Geni'),
            'GitHub'        => t('GitHub'),
            'Goodreads'     => t('Goodreads'),
            // 'Gowalla' => t('Gowalla'), //RIP
            'Identica'      => t('Identica'),
            'Instagram'     => t('Instagram'),
            'LastFM'        => t('LastFM'),
            'Mailru'        => t('Mail.ru'),
            'Murmur'        => t('Murmur'),
            'MyHeritage'    => t('MyHeritage'),
            'Odnoklassniki' => t('Odnoklassniki'),
            'Pixnet'        => t('Pixnet'),
            'Plurk'         => t('Plurk'),
            'QQ'            => t('QQ'),
            'Sina'          => t('Sina'),
            'Skyrock'       => t('Skyrock'),
            'Steam'         => t('Steam'),
            'Tumblr'        => t('Tumblr'),
            'TwitchTV'      => t('Twitch.tv'),
            'Viadeo'        => t('Viadeo'),
            'Vimeo'         => t('Vimeo'),
            'Vkontakte'     => t('VKontakte'),
            'Yandex'        => t('Yandex'),
        );
        foreach (hybridauth_providers_files() as $name => $file) {
            if (!array_key_exists($name, $raw_providers)) {
                $raw_providers[$name] = $name;
            }
        }

        $providers = array();
        $weights   = array();

        foreach ($raw_providers as $provider_id => $provider_name) {
            $weights[$provider_id] = variable_get('hybridauth_provider_' . $provider_id . '_weight', 0);
        }
        asort($weights);

        foreach ($weights as $provider_id => $weight) {
            $providers[$provider_id] = $raw_providers[$provider_id];
        }
    }

    return $providers;
}

/**
 * Returns available providers files, keyed by filename without extension.
 */
function hybridauth_providers_files()
{
    $cache = cache_get('hybridauth_providers_files');
    if (!empty($cache->data)) {
        $files = $cache->data;
    } else {
        $files = file_scan_directory(_hybridauth_library_path() . '/Hybrid/Providers', '/\.php$/', array('key' => 'name'));
        cache_set('hybridauth_providers_files', $files, 'cache', CACHE_TEMPORARY);
    }
    return $files;
}

/**
 * Returns HybridAuth fields.
 */
function hybridauth_fields_list()
{
    return array(
        'provider'      => t('Authentication provider'),
        'identifier'    => t('UID'),
        'profileURL'    => t('Profile URL'),
        'webSiteURL'    => t('Website URL'),
        'photoURL'      => t('Photo URL'),
        'displayName'   => t('Nickname'),
        'description'   => t('Short bio or about me'),
        'firstName'     => t('First name'),
        'lastName'      => t('Last name'),
        'gender'        => t('Gender'),
        'language'      => t('Language'),
        'age'           => t('Age'),
        'birthDay'      => t('Birth day'),
        'birthMonth'    => t('Birth month'),
        'birthYear'     => t('Birth year'),
        'email'         => t('E-mail address'),
        'emailVerified' => t('Verified email address'),
        'phone'         => t('Phone number'),
        'address'       => t('Address'),
        'country'       => t('Country'),
        'region'        => t('State or region'),
        'city'          => t('City'),
        'zip'           => t('Postal code or zipcode'),
    );
}

/**
 * Returns supported forms.
 */
function hybridauth_forms_list()
{
    return array(
        'user_login'         => t('User login form'),
        'user_login_block'   => t('User login block'),
        'user_register_form' => t('User registration form'),
        'comment_form'       => t('Comment form'),
    );
}

/**
 * Returns auth provider name by provider ID.
 */
function hybridauth_get_provider_name($provider_id)
{
    $providers = hybridauth_providers_list();
    return isset($providers[$provider_id]) ? $providers[$provider_id] : NULL;
}

function hybridauth_get_enabled_providers()
{
    $providers = & drupal_static(__FUNCTION__, NULL);

    if (!isset($providers)) {
        $providers = array();

        foreach (hybridauth_providers_list() as $provider_id => $provider_name) {
            if ($provider_config = hybridauth_get_provider_config($provider_id)) {
                $providers[$provider_id] = $provider_name;
            }
        }
    }

    return $providers;
}

/**
 * Returns HybridAuth object or exception code.
 */
function hybridauth_get_instance()
{
    $controller = & drupal_static(__FUNCTION__, NULL);

    if (!isset($controller)) {
        $controller = FALSE;

        if ($lib_path = _hybridauth_library_path()) {
            require_once $lib_path . '/Hybrid/Auth.php';
            $config = hybridauth_get_config();
            try {
                $controller = new Hybrid_Auth($config);
            }
            catch (Exception $e) {
                watchdog_exception('hybridauth', $e);
                $controller = $e->getCode();
            }
        }
    }

    return $controller;
}

/**
 * Returns HybridAuth config.
 */
function hybridauth_get_config()
{
    $config = & drupal_static(__FUNCTION__, NULL);

    if (!isset($config)) {
        if (variable_get('hybridauth_debug', FALSE) && !file_exists(file_directory_temp() . '/hybridauth.debug.log')) {
            file_put_contents(file_directory_temp() . '/hybridauth.debug.log', '');
        }

        $config = array(
            'base_url'   => url('hybridauth/endpoint', array('absolute' => TRUE)),
            'providers'  => array(),
            'debug_mode' => variable_get('hybridauth_debug', FALSE),
            'debug_file' => file_directory_temp() . '/hybridauth.debug.log',
        );

        foreach (hybridauth_providers_list() as $provider_id => $provider_name) {
            if ($provider_config = hybridauth_get_provider_config($provider_id)) {
                $config['providers'][$provider_id] = $provider_config;
            }
        }
    }

    return $config;
}

/**
 * Returns provider config.
 */
function hybridauth_get_provider_config($provider_id, $enabled_only = TRUE)
{
    $enabled = variable_get('hybridauth_provider_' . $provider_id . '_enabled', 0);
    if (!$enabled_only || $enabled) {
        return array(
            'enabled'         => $enabled,
            'keys'            => array(
                'id'     => trim(variable_get('hybridauth_provider_' . $provider_id . '_keys_id', '')),
                'key'    => trim(variable_get('hybridauth_provider_' . $provider_id . '_keys_key', '')),
                'secret' => trim(variable_get('hybridauth_provider_' . $provider_id . '_keys_secret', '')),
            ),
            'scope'           => array_filter(variable_get('hybridauth_provider_' . $provider_id . '_scope', array())),
            'display'         => variable_get('hybridauth_provider_' . $provider_id . '_display', 'popup'),
            'hauth_return_to' => url('hybridauth/endpoint'),
        );
    }

    return NULL;
}

/**
 * Returns connected providers for the current user.
 */
function hybridauth_get_connected_providers()
{
    $connected_providers = array();
    if (user_is_logged_in() && $hybridauth = hybridauth_get_instance()) {
        if (is_object($hybridauth)) {
            foreach ($hybridauth->getConnectedProviders() as $provider_id) {
                $connected_providers[$provider_id] = hybridauth_get_provider_name($provider_id);
            }
        }
    }

    return $connected_providers;
}

/**
 * Returns the path to the HybridAuth library.
 */
function _hybridauth_library_path()
{
    $library_path = & drupal_static(__FUNCTION__, NULL);

    if (!isset($library_path)) {
        $library_path = variable_get('hybridauth_library_path', module_exists('libraries') ? libraries_get_path('hybridauth') : 'sites/all/libraries/hybridauth');
        if (file_exists($library_path . '/Hybrid/Auth.php')) {
        } elseif (file_exists($library_path . '/hybridauth/Hybrid/Auth.php')) {
            $library_path .= '/hybridauth';
        } else {
            watchdog('hybridauth', 'HybridAuth library is missing.', array(), WATCHDOG_ERROR);
            $library_path = FALSE;
        }
    }

    return $library_path;
}

function _hybridauth_add_icon_pack_files($name)
{
    $done = & drupal_static(__FUNCTION__, NULL);
    if (!isset($done[$name])) {
        $done[$name] = TRUE;
        $icon_pack   = hybridauth_get_icon_pack($name);
        if (!empty($icon_pack['css'])) {
            drupal_add_css($icon_pack['path'] . '/' . $icon_pack['css']);
        }
        if (!empty($icon_pack['js'])) {
            drupal_add_js($icon_pack['path'] . '/' . $icon_pack['js']);
        }
    }
}

function _hybridauth_make_username($data)
{
    if (empty($data['username'])) {
        $pattern       = variable_get('hybridauth_username', 'hybridauth_[user:hybridauth:provider]_[user:hybridauth:identifier]');
        $account       = new stdClass();
        $account->data = array('hybridauth' => $data);
        
        $hybridauth_name = $desired_name = trim(token_replace($pattern, array('user' => $account), array('clear' => TRUE, 'sanitize' => FALSE)));
    } else {
        $hybridauth_name = $desired_name = trim($data['username']);
    }

    $counter = 0;
    while (user_load_by_name($hybridauth_name)) {
        $counter++;
        $hybridauth_name = $desired_name . ' ' . $counter;
    }
    $name = $hybridauth_name;

    drupal_alter('hybridauth_username', $name, $data);

    // Check that the altered username is unique.
    if ($name == $hybridauth_name || user_load_by_name($name)) {
        return $hybridauth_name;
    } else {
        return $name;
    }
}

function _hybridauth_user_is_blocked_by_uid($uid)
{
    return db_select('users')
        ->fields('users', array('name'))
        ->condition('uid', $uid)
        ->condition('status', 0)
        ->execute()->fetchObject();
}

function _hybridauth_user_login_access_by_uid($uid)
{
    $result = db_select('users')
        ->fields('users', array('login'))
        ->condition('uid', $uid)
        ->execute()->fetchObject();
    // Dries birthday timestamp, Nov 19, 1978 = 280281600 :).
    return !($result->login == 280281600);
}

function _hybridauth_identity_save($data, $uid = NULL)
{
    global $user;
    $uid = $uid ? $uid : $user->uid;
    db_merge('hybridauth_identity')
        ->key(array('uid' => $uid, 'provider' => $data['provider'], 'provider_identifier' => $data['identifier']))
        ->fields(array('data' => serialize($data)))
        ->execute();
}

function _hybridauth_identity_load($data)
{
    $result = db_select('hybridauth_identity', 'ha_id')
        ->fields('ha_id')
        ->condition('provider', $data['provider'], '=')
        ->condition('provider_identifier', $data['identifier'], '=')
        ->execute()
        ->fetchAssoc();
    return $result;
}

function _hybridauth_identity_load_by_uid($uid)
{
    $result = db_select('hybridauth_identity', 'ha_id')
        ->fields('ha_id')
        ->condition('uid', $uid, '=')
        ->execute()
        ->fetchAllAssoc('id', PDO::FETCH_ASSOC);
    return $result;
}

function _hybridauth_identity_load_by_id($id)
{
    $result = db_select('hybridauth_identity', 'ha_id')
        ->fields('ha_id')
        ->condition('id', $id, '=')
        ->execute()
        ->fetchAssoc();
    return $result;
}

function _hybridauth_identity_delete_by_uid($uid)
{
    $result = db_delete('hybridauth_identity')
        ->condition('uid', $uid, '=')
        ->execute();
    return $result;
}

function _hybridauth_identity_delete_by_id($id)
{
    $result = db_delete('hybridauth_identity')
        ->condition('id', $id, '=')
        ->execute();
    return $result;
}

function _hybridauth_session_save($data, $uid = NULL)
{
    global $user;
    $uid = $uid ? $uid : $user->uid;
    db_merge('hybridauth_session')
        ->key(array('uid' => $uid))
        ->fields(array('data' => $data, 'updated' => REQUEST_TIME))
        ->execute();
}

function _hybridauth_session_load_by_uid($uid)
{
    $result = db_select('hybridauth_session', 'ha_sess')
        ->fields('ha_sess')
        ->condition('uid', $uid, '=')
        ->execute()
        ->fetchAssoc();
    return $result;
}

function _hybridauth_session_delete_by_uid($uid)
{
    $result = db_delete('hybridauth_session')
        ->condition('uid', $uid, '=')
        ->execute();
    return $result;
}

function imx_welcome()
{
    global $user;
    $identities = _hybridauth_identity_load_by_uid($user->uid);

    if (empty($identities)) {
        $form['identity'] = array(
            '#theme'  => 'table',
            '#sticky' => FALSE,
            '#empty'  => t(""),
        );

        // Add more identities.
        if ($user->uid && user_access('use hybridauth')) {
            $form['hybridauth_widget'] = array(
                '#type'                   => 'hybridauth_widget',
                '#title'                  => t(''),
                '#weight'                 => 10,
                '#hybridauth_widget_type' => 'list',
                '#hybridauth_destination' => '',
            );
        }
    }
    $data = array("identities" => $identities, "form" => $form, "user" => $user);
    return theme('imx_welcome', array("data" => $data));
}


function autologinExecute($data, $form_state = FALSE)
{
    global $user;
    // User is already logged in, tries to add new identity.
    if (user_is_logged_in()) {
        // Identity is already registered.
        if ($identity = _hybridauth_identity_load($data)) {
            // Registered to this user.
            if ($user->uid == $identity['uid']) {
                drupal_set_message(t('You have already registered this identity.'));
                _hybridauth_window_close();
            } // Registered to another user.
            else {
                drupal_set_message(t('This identity is registered to another user.'), 'error');
                _hybridauth_window_close();
            }
        } // Identity is not registered - add it to the logged in user.
        else {
            _hybridauth_identity_save($data);
            drupal_set_message(t('New identity added.'));
            // Invoke hybridauth_identity_added rules event.
            if (module_exists('rules')) {
                rules_invoke_event('hybridauth_identity_added', $user, $data);
            }
            _hybridauth_window_close();
        }
    }

    if ($identity = _hybridauth_identity_load($data)) {
        // Check if user is blocked.
        if ($account = _hybridauth_user_is_blocked_by_uid($identity['uid'])) {
            drupal_set_message(t('The username %name has not been activated or is blocked.', array('%name' => $account->name)), 'error');
        } // Check for email verification timestamp.
        elseif (!_hybridauth_user_login_access_by_uid($identity['uid'])) {
            $data = unserialize($identity['data']);
            drupal_set_message(t('You need to verify your e-mail address - !email.', array('!email' => $data['email'])), 'error');
            drupal_set_message(t('A welcome message with further instructions has been sent to your e-mail address.'));
            _user_mail_notify('register_no_approval_required', user_load($identity['uid']));
        } else {
            $form_state['uid'] = $identity['uid'];
            user_login_submit(array(), $form_state);
            drupal_set_message("Has sido logueado automaticamente");
            drupal_goto("/");
            // Invoke hybridauth_user_login rules event.
            if (module_exists('rules')) {
                rules_invoke_event('hybridauth_user_login', $user, $data);
            }
        }
    } // Handle duplicate email addresses.
}


/*Mailchimp integracion*/

/**
 * Implement of Hook_user_insert
 * Registra a un usuario nuevo en una lista de mailchimp
 *
 */
function hybridauth_user_insert(&$edit, $account, $category)
{
    $check = TRUE;
    //_check_hybridauth_mail($check, $edit);
    if ($check) {
        //agregar el email a la lista de mailchimp
        $apikey = variable_get('imx_mailchimp_apikey', NULL);
        $listId = variable_get('imx_mailchimplist_listid', NULL);

        if ($apikey && $listId) {
            //verificamos que las variables tengan valor
            $email      = $account->mail;
            $nombre     = $account->name;
            $merge_vars = array(
                'NAME' => $nombre,
            );

            $groupid = variable_get('imx_mailchimplist_groupid', FALSE);
            $groups  = array(variable_get('imx_mailchimplist_groupopt', FALSE));
            if ($groupid && variable_get('imx_mailchimplist_groupopt', FALSE)) {
                $merge_vars["GROUPINGS"] = array("id" => $groupid, "groups" => $groups);
            }

            $extra_email = _check_hybridauth_extra_email($edit);
            try {
                $api = new Mailchimp($apikey);


                /*Primera ronda mail cuenta social*/
                $retval = imx_hybridauth_check_if_exist_mail_mailchimp_list($api, $email, $listId);
                if ($retval == FALSE) {
                    $add = imx_hybridauth_add_user_to_mailchimp_list($api, $email, $listId, $merge_vars);
                    if ($add == TRUE) {
                        //drupal_set_message(t('Has sido suscrito al boletín del sitio'));
                    }
                }

                /*Segunda ronda extra mail */
                $extra_email = _check_hybridauth_extra_email($edit);
                if ($extra_email) {
                    if ($extra_email != $account->mail) {
                        $retval = imx_hybridauth_check_if_exist_mail_mailchimp_list($api, $extra_email, $listId);
                        if ($retval == FALSE) {
                            $add = imx_hybridauth_add_user_to_mailchimp_list($api, $extra_email, $listId, $merge_vars);
                            if ($add == TRUE) {
                                //drupal_set_message(t('Has sido suscrito al boletín del sitio'));
                            }
                        }
                    }
                }

            }
            catch (Mailchimp_Error $e) {
                //this excepcion capcth all errors
            }
        }
    }
}

/**
 * Implement of hook_user_update
 * actualiza o registra los datos del usuario en una lista de mailchimp
 * @param type $edit
 * @param type $account
 * @param type $category
 */
function hybridauth_user_update(&$edit, $account, $category)
{
    $check = TRUE;
    //_check_hybridauth_mail($check,$edit);
    if ($check) {
        //datos api
        $apikey = variable_get('imx_mailchimp_apikey', NULL);
        $listId = variable_get('imx_mailchimplist_listid', NULL);
        //$groupid = variable_get('imx_mailchimp_groupid', NULL);



        if ($apikey && $listId) {
            //datos user
            $mail      = $account->mail;
            $init_mail = $account->init;

            //Campo de nombre completo del usuario
            $complete_name = $account->name;
            //Campo de categorias o preferencias
            //$groups = get_selected_groups_mailchimp($edit['field_boletin']['und']);
            //datos a actualizar en mailchimp
            $mailchimp_name = ($complete_name) ? $complete_name : $edit['name'];
            $merge_vars     = array(
                'NAME' => $mailchimp_name,
            );

            $groupid = variable_get('imx_mailchimplist_groupid', FALSE);
            $groups  = array(variable_get('imx_mailchimplist_groupopt', FALSE));
            if ($groupid && variable_get('imx_mailchimplist_groupopt', FALSE)) {
                $merge_vars["GROUPINGS"] = array("id" => $groupid, "groups" => $groups);
            }

            try {
                $api = new Mailchimp($apikey);
                if ($init_mail == $mail) {
                    //Actualizar o agregar el email en mailchimp
                    $update = imx_hybridauth_update_or_suscribe_account_of_user_mailchimp($api, $mail, $listId, $merge_vars);
                } else {
                    //el usuario cambio de email regsitrar cambio en mailchimp
                    $update = imx_hybridauth_update_or_register_changes_of_email_mailchimp($api, $init_mail, $listId, $mail, $merge_vars);
                }
                if ($update == TRUE) {
                    //drupal_set_message(t('Los datos se actualizaron de forma correcta'));
                }

                $extra_email = _check_hybridauth_extra_email($edit);
                if ($extra_email) {
                    if ($extra_email != $account->mail) {
                        $retval = imx_hybridauth_check_if_exist_mail_mailchimp_list($api, $extra_email, $listId);
                        if ($retval == FALSE) {
                            $add = imx_hybridauth_add_user_to_mailchimp_list($api, $extra_email, $listId, $merge_vars);
                            if ($add == TRUE) {
                                //drupal_set_message(t('Has sido suscrito al boletín del sitio'));
                            }
                        }
                    }
                }

            }
            catch (Mailchimp_Error $e) {
                //this excepcion capcth all errors
            }
        }
    }
}

/**
 * Implement of Hook_user_cancel
 *
 * elimina a un usuario de la lista cuando su cuenta es cancelada
 * @param type $edit
 * @param type $account
 * @param type $method
 */
function hybridauth_user_cancel($edit, $account, $method)
{
    $email  = $account->mail;
    $apikey = variable_get('imx_mailchimp_apikey', NULL);
    $listId = variable_get('imx_mailchimplist_listid', NULL);
    if ($apikey && $listId) {
        try {
            $api    = new Mailchimp($apikey);
            $retval = imx_hybridauth_update_check_if_exist_mail_mailchimp_list($api, $email, $listId);
            if ($retval['value'] == TRUE) {
                // el usuario existe por lo tanto validar si esta subscrito
                if ($retval['status'] == 'subscribed') {
                    //unsubscribe member
                    $unsubscribe = imx_hybridauth_unsubcribe_member_of_mailchimp_list($api, $email, $listId);
                    if ($unsubscribe == TRUE) {
                        drupal_set_message(t('El usuario ha sido removido de la lista de subscritores de forma correcta'));
                    }
                }
            }
        }
        catch (Mailchimp_Error $e) {
            //this excepcion capcth all errors
        }
    }
}

function _check_hybridauth_mail(&$check, $edit)
{
    $hybrit_newsletter_fields = variable_get("imx_newsletter_field", FALSE);
    if ($hybrit_newsletter_fields) {
        if (db_table_exists($hybrit_newsletter_fields)) {
            $field_name_newsletter = str_replace("_data_field", "", $hybrit_newsletter_fields);
            $check                 = $edit[$field_name_newsletter]['und'][0]['value'];
        }
    }
}


function _check_hybridauth_extra_email($edit)
{
    $email                     = FALSE;
    $hybrit_extra_email_fields = variable_get("imx_extra_email_field", FALSE);
    if ($hybrit_extra_email_fields) {
        if (db_table_exists($hybrit_extra_email_fields)) {
            $field_name_extra_email = str_replace("_data_field", "", $hybrit_extra_email_fields);
            $email                  = $edit[$field_name_extra_email]['und'][0]['value'];
        }
    }
    return $email;
}
function get_login_popup(){
$form_login_data=  drupal_get_form("user_login");
//print_r($form_login_data);exit;
$form_login_data["name"]["#title"] = "";
$form_login_data["name"]["#description"] = "";
$form_login_data["name"]['#attributes']["placeholder"] = "Tu correo electrónico";

$form_login_data["pass"]["#title"] = "";
$form_login_data["pass"]["#description"] = "";
$form_login_data["pass"]['#attributes']["placeholder"] = "Contraseña";

$form_login_data["actions"]['submit']["#value"] = "Iniciar sesión";
$form_login_data["actions"]['submit']["#attributes"]["class"][] = "btn-login";

$email_data=($_GET["email"])? $_GET["email"] :"";
//[#value] 
$form_login_data["name"]["#value"]=$email_data;

//$form_login_data["redirect"] = "inicio";
  $block = module_invoke('hybridauth', 'block_view', 'hybridauth');
  $html_login="   <section id='popup_iniciar_sesion' class='windowRegister'>
            <div class='windowHeader'>
                <img src='/". drupal_get_path("theme","garuyod7")."/images/logo_garuyo_v4.png' />
                <div class='windowRegister-close'>
                    <span class='O25l1'>Cerrar <strong>X</strong></span>
                </div>
            </div>
            <div class='windowBody'>
                <h3 class='O25l0 tacenter mb20'>¡Inicia sesión con tu correo electrónico!</h3>
                <div class='userLoginForm tacenter'>
                <form action='/user' method='post' id='user-login' accept-charset='UTF-8'>
                <div>
                    ".drupal_render_children($form_login_data)."
                <div>
                    
                </div>
                </form>  
                <h3 class='O25l0 tacenter mb20'>También puedes ingresar con tu red social favorita</h3>
                <div class='loginSocial tacenter'>".
                render($block['content'])
               ."
                </div>
                
                <p class='mb40 mt20'>
                    <a href='#new-user' class='O20l4 new-user-registration'>Soy nuevo, me quiero registrar</a>
                </p>
            </div>
        </section>    
    ";
  echo $html_login;
}
function get_register_popup(){
  
  $register_form = drupal_get_form('user_register_form');
    $register_form["actions"]['submit']["#value"] = "Registrar";
    $register_form["#action"] = "/user/register";

$email_data=($_GET["email"]!="undefined")? $_GET["email"] :"";
$register_form["account"]["mail"]["#value"]=$email_data;
$register_form["actions"]['submit']["#value"] = "Enviar";
$register_form["actions"]['submit']["#attributes"]["class"][] = "btn-vermasAzul centered O40l1 link";
  
$register_form["account"]["mail"]["#title"] = "";
$register_form["account"]["mail"]["#description"] = "";
$register_form["account"]["mail"]['#attributes']["placeholder"] = "Tu correo electrónico";
$register_form["account"]["pass"]["pass1"]["#title"] = "";
$register_form["account"]["pass"]["#description"] = "";
$register_form["account"]["pass"]["pass1"]["#description"] = "";
$register_form["account"]["pass"]["pass1"]['#attributes']["placeholder"] = "Tu contraseña";
$register_form["account"]["pass"]["pass2"]["#title"] = "";
$register_form["account"]["pass"]["pass2"]["#description"] = "";
$register_form["account"]["pass"]["pass2"]['#attributes']["placeholder"] = "Repite tu contraseña";
//    print_r($register_form);exit;

  $html_login="   <section id='popup_registro_01' class='windowRegister'>
            <div class='windowHeader'>
                <img src='/". drupal_get_path("theme","garuyod7")."/images/logo_garuyo_v4.png' />
                <div class='windowRegister-close'>
                    <span class='O25l1'>Cerrar <strong>X</strong></span>
                </div>
            </div>
            <div class='windowBody'>
               <h2 class='O30l0 tacenter mt30 mb30'>¡Regístrate ahora!</h2>
                <div class='userRegistrationForm tacenter'>
                    <form class='user-info-from-cookie' enctype='multipart/form-data' action='".$register_form["#action"]."' method='post' id='".$register_form["#form_id"]."' accept-charset='UTF-8'>
                      ".drupal_render_children($register_form)."
                    </form>
                </div>
                <div class='tacenter centered mt40 mb20'>
                    <p class='A13r0 mb5 lh20'>Al continuar, declaras que aceptas nuestros <a href='/terminos-y-condiciones-de-uso'>Términos y condiciones de uso</a> y nuestro <a href='/aviso-de-privacidad'>Aviso de privacidad</a>.</p>
                    <p class='A13r0 lh20'>Y quedarás suscrito al boletín de Garuyo.com y servicios, en caso de que no desees recibirlo podrás cancelarlo en cualquier momento.</p>
                </div>
            </div>
        </section>    
    ";
  echo $html_login;
}
function get_lost_password_popup(){
  
  $register_form = drupal_get_form('user_pass');
//  print_r($register_form);exit;
//    $register_form["actions"]['submit']["#value"] = "Registrar";
//    $register_form["#action"] = "/user/register";
//    print_r($register_form);exit;
  $html_login="   <section id='popup_olvidar_contrasena_v1' class='windowRegister'>
            <div class='windowHeader'>
                <img src='/". drupal_get_path("theme","garuyod7")."/images/logo_garuyo_v4.png' />
                <div class='windowRegister-close'>
                    <span class='O25l1'>Cerrar <strong>X</strong></span>
                </div>
            </div>
            <div class='windowBody'>
               <p class='mt20 O30l0 lh30'>¿Olvidaste tu contraseña?</p>
                <div class='userRegistrationForm tacenter'>
                    <form action='".$register_form["#action"]."' method='post' id='".$register_form["#form_id"]."' accept-charset='UTF-8'>
                      ".drupal_render_children($register_form)."
                    </form>
                </div>
            </div>
        </section>    
    ";
  echo $html_login;
}

function get_instruccion_favorito(){
  $html_login=" <section id='popup_favorito_01' class='windowRegister'>
            <div class='windowHeader'>
                <img src='/".drupal_get_path("theme","garuyod7")."/images/logo_garuyo_v4.png'/>
                <div class='windowRegister-close'>
                    <span class='O25l1'>Cerrar <strong>X</strong></span>
                </div>
            </div>
            <div class='windowBody'>
                <p class='mt20 O30l0 lh30'>Guarda lo que más te guste con un solo clic.</p>
                <img src='/".drupal_get_path("theme","garuyod7")."/images/instruccion_popup.png' alt='Garuyo inicia sesión y guarda tus Favoritos'/>
                <p class='mt20 O25l0 lh30 mb30'>Inicia sesión y guarda tus Favoritos</p>
                <span class='btn-login mb40 btn-init-seseion'></span>
            </div>
        </section>  
    ";
  echo $html_login;
}

function saveEventPlace($cookie_data){
  $redirect="";
      
  return $redirect;
}