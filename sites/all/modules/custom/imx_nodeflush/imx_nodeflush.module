<?php 
//Estas constantes se deben definir manualmente en el codigo del modulo.
define('VARNISH_HOST',$_SERVER['HTTP_HOST']);
define('VARNISH_ADMIN','127.0.0.1');

/**
 * Implementation of hook_permission()
 */
function imx_nodeflush_permission() {
  $permissions['administer node flush'] = array(
    'title' => t('Administer Node Flush'),
    'description' => t('Permision for flush cache node.'),
  );
  return $permissions;
}

/**
 * Implementation of hook_menu().
 */
function imx_nodeflush_menu() {
  $items['node/%/flush_cache'] = array(
    'title' => 'Borrar Cache',
    'description'      => t('Flush node cache from varnish'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imx_nodeflush_form',1),
    'access arguments' => array('administer node flush'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
* Implementation of hook_form()
*/
function imx_nodeflush_form($form_state){
  //Add validaciones
  drupal_add_js(drupal_get_path('module', 'imx_nodeflush').'/imx_nodeflush.js');
  $node=node_load(arg(1));
  $form['nodeflush'] = array(
    '#type' => 'fieldset',
    '#title' => 'Borrar cache de Varnish',
    '#description' => '<p><span style="font-size:18px;font-weight:bold;margin-bottom:20px;"><span style="color:red;">Realmente quieres borrar la cache del nodo</span>:<br><br>'.$node->title.'<br><br></span></p>',
    '#weight' => 5,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['nodeflush']['nid'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );
  $form['nodeflush']['submit'] = array(
    '#type' => 'submit',
		'#value' => t('Delete'),
	);
  return $form;
}

/**
* Implementation of hook_form_submit()
*/
function imx_nodeflush_form_submit($form, $form_values){
  $nid=(int)$form_values['values']['nid'];
  if($nid>0){
    $node_path=drupal_get_path_alias('node/'.$nid);
    if($node_path){
      //Clear the static loading cache.
      entity_get_controller('node')->resetCache(array($nid));
      //Clear page cache
      cache_clear_all($node_path,'cache_page',true);
      //Clear path cache
      cache_clear_all($nid,'cache_path',true);
      //Clear everything else
      cache_clear_all();
    
      //Clear varnish cache
      $path='/'.$node_path;
      $result=imx_node_flush_cache_varnish_by_curl('BAN',$path,VARNISH_HOST,VARNISH_ADMIN);
      if(!$result){
        drupal_set_message('Hubo un error al intentar borrar la caché de la url: '.$path.' [Esto puede pasar si la url no existe, consulta a tu Administrador]','error',FALSE);
      }else{
        drupal_set_message('<span style="color:#ED0358;font-size:18px;font-weight:bold;">Cache borrada para la url: '.$path.'.</span>','status',FALSE);
        $result=imx_node_flush_cache_varnish_by_curl('REFRESH',$path,VARNISH_HOST,VARNISH_ADMIN);
        if(!$result){
          drupal_set_message('Hubo un error al intentar regenerar la caché de la url: '.$path.' [Consulta de inmediato con tu Administrador]','error',FALSE);
        }else{
          drupal_set_message('Regeración de caché exitosa para la url: '.$path,'status',FALSE);
        }
      }
    }
  }else{
    drupal_set_message('Error borrando la caché consulte a su administrador','error');
  }
}

/**
 * Put on BAN LIST of Varnish for an URL
 * @param string action      Command to clear URL from Varnish, commands for clear Cache
 *                           BAN             Clear url cache from Varnish
 *                           REFRESH/RELOAD  Get force regenerate cache URL from Varnish
 * @param string $url        URL for ban list (purge)
 * @param string $host       Host for the URL, it needs for HTTP HEADER
 * @param string $ipVarnish  IP that can makes a BAN Request @see ACL from config varnish, Default LocalHost (127.0.0.1)
 * @return boolean TRUE if the URL can be put on BAN List or False it this fail
 */
function imx_node_flush_cache_varnish_by_curl($action='BAN', $url='/', $host=NULL, $ipVarnish='127.0.0.1'){
  //If $url is front, home, slash or null, means Home or Root
  if($url=='<front>' || $url=='home' || $url=='' || is_null($url)){
    $url='/';
  }
  //If not host, set this HTTP_HOST from $_SERVER
  if(!$host){
    $host=$_SERVER['HTTP_HOST'];
  }
  //Set default results
  $result=FALSE;
  $data=NULL;
  //Set cURL object
  $cURL = curl_init();
  //Set cURL options
  $cURLOptions=array(
    CURLOPT_URL            => 'http://'.$ipVarnish.$url ,
    CURLOPT_HTTPHEADER     => array('Host: '.$host),
    CURLOPT_CUSTOMREQUEST  => $action,
    CURLOPT_HEADER         => TRUE,
    CURLOPT_RETURNTRANSFER => TRUE
  );
  //Set cURL Options on cURL object
  curl_setopt_array($cURL,$cURLOptions);
  //Execute cURL process
  $data=curl_exec($cURL);
  //Hold any possible error number 0 means that is no error
  $curl_errno=curl_errno($cURL);
  //Close cURLhandling
  curl_close($cURL);
  //Validate result & possible error
  if(strlen(trim($data))>0 && $curl_errno==0){
    $result=TRUE;
  }
  return $result;
}    
