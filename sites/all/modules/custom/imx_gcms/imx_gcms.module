<?php

include_once "imx_gcms_helper.inc";



define("IMX_GCMS_FIELD_IMAGE", variable_get("imx_gcms_field_image", "field_image"));
define("IMX_GCMS_FIELD_IMAGES", variable_get("imx_gcms_field_images", "field_images"));
define("IMX_GCMS_FIELD_VIDEO", variable_get("imx_gcms_field_video", "field_video"));
define("IMX_GCMS_FIELD_VIDEO_URL", variable_get("imx_gcms_field_video_url", "field_video_url"));
define("IMX_GCMS_FIELD_VIDEO_DESC", variable_get("imx_gcms_field_video_desc", "field_video_desc"));
define("IMX_GCMS_FIELD_AUTOR", variable_get("imx_gcms_field_autor", "field_autor"));
define("IMX_GCMS_FIELD_COLUMNISTA", variable_get("imx_gcms_field_columnista", "NA"));

define("IMX_GCMS_FIELD_RELATEDS", variable_get("imx_gcms_field_relateds", "NA"));
define("IMX_GCMS_FIELD_RELATEDS_URL", variable_get("imx_gcms_field_relateds_url", "NA"));
define("IMX_GCMS_FIELD_RELATEDS_TITLE", variable_get("imx_gcms_field_relateds_title", "NA"));


define("IMX_GCMS_CONTENT_ARTICLE", variable_get("imx_gcms_content_article", "article"));
define("IMX_GCMS_CONTENT_GALLERIE", variable_get("imx_gcms_content_gallerie", "gallerie"));
define("IMX_GCMS_CONTENT_VIDEO", variable_get("imx_gcms_content_video", "video"));
define("IMX_GCMS_CONTENT_OPINION", variable_get("imx_gcms_content_blog", "NA"));


/*
 * Implements hook_menu().
 */

function imx_gcms_menu()
{
    $items = array();

    $items['admin/config/imx_gcms'] = array(
        'title' => 'InventMx GCMS',
        'description' => 'Configuración de InvemtMX GCMS.',
        'access callback' => TRUE,
        'page callback' => 'system_admin_menu_block_page',
        'access arguments' => array('administer imx gcms'),
        'position' => 'right',
        'weight' => -200,
        'file' => 'system.admin.inc',
        'file path' => drupal_get_path('module', 'system'),
    );


    $items['admin/config/imx_gcms/prepare/add'] = array(
        'title' => t('Transferencia de imágenes'),
        'page callback' => 'batch_transfer_image',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );



    $ciudades=getSites();
    foreach($ciudades as $ciudad=>$host) {
        if(!preg_match("/$host/",$_SERVER['HTTP_HOST'])) {
            $items['admin/content/' . $ciudad] = array(
                'title' => t($ciudad),
                'description' => t($ciudad),
                'page callback' => 'imx_gcms_ciudad',
                'access arguments' => array('administer imx gcms'),
                'type' => MENU_LOCAL_TASK,
            );
        }
    }


    $items['admin/content/imx_gcms_imports'] = array(
        'title' => t('Contenidos importados'),
        'description' => t('Contenidos importados'),
        'page callback' => 'imx_gcms_imports_history_list',
        'access arguments' => array('administer imx gcms'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'imx_gcms.admin.inc',
    );

    /* Configuracion de la seccion de Frameworks */
    $items['admin/config/imx_gcms/add'] = array(
        'title' => t('Create article'),
        'page callback' => 'imx_gcms_add_item',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file path' => drupal_get_path('module', 'node'),
        'file' => 'node.pages.inc',
    );

    $items['admin/config/imx_gcms/details'] = array(
        'title' => t('Details content'),
        'page callback' => 'imx_gcms_detail_item',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );


    /* Configuracion de la seccion de SITIOS */
    $items['admin/config/imx_gcms/sites/imports'] = array(
        'title' => 'GCMS-Contenidos Importados',
        "type" => MENU_LOCAL_TASK,
        'access arguments' => array('administer imx gcms'),
        'page callback' => 'imx_gcms_imports_history_list',
        'access_callback' => TRUE,
        'weight' => -10,
        'file' => 'imx_gcms.admin.inc',
    );



    $items['admin/config/imx_gcms/config'] = array(
        'title' => 'Configuración  InventMx GCMS',
        'description' => 'Configuración de InventMx GCMS.',
        'page callback' => 'drupal_get_form',
        'type' => MENU_NORMAL_ITEM,
        'access arguments' => array('configure imx gcms'),
        'page arguments' => array('imx_gcms_admin_settings_form'),
        'file' => 'imx_gcms.admin.inc',
    );

    return $items;
}

/**
 * Implements hook_permission().
 */
function imx_gcms_permission()
{
    return array(
        'administer imx gcms' => array(
            'title' => t('Administer InventMx GCMS'),
            'description' => t('Administrar InventMx GCMS Module.'),
        ),
        'configure imx gcms' => array(
            'title' => t('configure InventMx GCMS'),
            'description' => t('Configurar InventMx GCMS Module.'),
        ),
    );
}


function imx_gcms_add_item()
{
    // print_r(node_load(4022));
    $is_hub = FALSE;
    $site = arg(4);
    $id = arg(5);

    if (is_string($site) && (is_numeric($id))) {
        $exists_import = imx_gcms_check_item_import($id, getSite($site));
        if (!$exists_import) {
            $node_api = getFeedContent($site, $id);
            $node = prepareNode($node_api, $site, $id);
            //node_object_prepare($node);
            $type = getNodeAPIType($node_api);
            $form_id = $type . '_node_form';

            $output = drupal_get_form($form_id, $node);
            return render($output);
        } else {
            $options = array('absolute' => TRUE);
            $message = t('El contenido que tratas de importar ya esta guardado en este sitio puedes verlo aqui ' . l("puedes verlo aquí", url("node/{$exists_import}", $options)));
            drupal_set_message($message, "warning");
            drupal_goto("/admin/content/{$site}");
        }
    } else {
        $message = t('La petición no se ha podido procesar correctamente, intenta nuevamente.');
        drupal_set_message($message, "warning");
        drupal_goto("admin/config/imx_gcms/sites");
    }
}


function prepareNode($node_api, $site, $id, $repo)
{
    //global $user;
    $node = new StdClass();
    $node->type = getNodeAPIType($node_api);
    $node->language = LANGUAGE_NONE;
    //$node->uid      = $user->uid;
    node_object_prepare($node);

    $node->title = $node_api["title"];

    $node->body[$node->language][0]['value'] = trim(strip_tags($node_api["body"], '<blockquote><iframe><h1><h2><h3><h6><ul><ol><li><p><br><strong><b><span><img><div>'));
    $node->body[$node->language][0]['format'] = "filtered_html";


    $tags_api = $node_api["tags"];
    $tags = prepareTags($tags_api);
    if ($tags) {
            $node->field_tags[$node->language] = $tags;
    }


    //Asignamos el datos de rastreo via GCMS
    $node->field_gcms[$node->language][0]["value"] = 1;
    $node->field_gcms_id_source[$node->language][0]["value"] = $node_api["id"];
    $node->field_gcms_site_source[$node->language][0]["value"] = $site;
    $node->field_gcms_title_source[$node->language][0]["value"] = $node_api["title"];
    $node->field_gcms_url_source[$node->language][0]["value"] = $node_api["url"];



    if (IMX_GCMS_FIELD_VIDEO != "NA") {

        $field_video = IMX_GCMS_FIELD_VIDEO;
        $field_info = field_info_field($field_video);
        if ($field_info["type"] == "field_collection") {
            $videos = prepareVideosFieldCollection($node_api["videos"], $node);
            $node->{$field_video}[$node->language] = $videos;
        } else if ($field_info["type"] == "video_embed_field") {
            $videos = prepareVideosEmbed($node_api["videos"], $node);
            $node->{$field_video}[$node->language] = $videos;
        } else if ($field_info["type"] == "youtube") {
            $videos = prepareVideosYoutube($node_api["videos"], $node);
            $node->{$field_video}[$node->language] = $videos;
        }
    }

    /*
    if ($repo !== "play") {
        if (IMX_GCMS_FIELD_RELATEDS != "NA") {
            $relateds = prepareRelatedsFieldCollection($node_api, $node, $site);
            $field_gcms_relateds = "IMX_GCMS_FIELD_RELATEDS";
            $node->{$field_gcms_relateds}[$node->language] = $relateds;
        }
    }
    */

    $images = (isset($_SESSION["imx_gcms"][$site][$id]["images"])) ? $_SESSION["imx_gcms"][$site][$id]["images"] : array();
    $image = (isset($_SESSION["imx_gcms"][$site][$id]["image"])) ? $_SESSION["imx_gcms"][$site][$id]["image"] : array();

    if (IMX_GCMS_FIELD_IMAGES == IMX_GCMS_FIELD_IMAGE) {
        $field_images = IMX_GCMS_FIELD_IMAGES;
        $image_data = (count($images)) ? $images : $image;
        foreach ($image_data as $file) {
            $file_array = (array)$file["file"];
            $file_array["alt"] = $file["title"];
            $file_array["title"] = $file["description"];
            $node->{$field_images}['und'][] = (array)$file_array;
            file_usage_add($file["file"], 'node', "file", $file["file"]->fid);
        }

    } else {
        $field_image = IMX_GCMS_FIELD_IMAGE;
        $field_images = IMX_GCMS_FIELD_IMAGES;
        foreach ($image as $file) {
            $file_array = (array)$file["file"];
            $file_array["title"] = $file["title"];
            $file_array["alt"] = $file["description"];

            $node->{$field_image}['und'][] = (array)$file_array;
            file_usage_add($file["file"], 'node', "file", $file["file"]->fid);
        }
        if ($field_images != "NA") {
            foreach ($images as $file) {
                $file_array = (array)$file["file"];
                $file_array["alt"] = $file["title"];
                $file_array["title"] = $file["description"];
                $node->{$field_images}['und'][] = (array)$file_array;
                file_usage_add($file["file"], 'node', "file", $file["file"]->fid);
            }
        }
    }

    unset($_SESSION["imx_gcms"]);
    return $node;

}

function prepareTags($tags_api)
{
    $tag_list = FALSE;
    if (variable_get("imx_gcms_field_tags", FALSE) && variable_get("imx_gcms_field_v_tags", FALSE)) {
        foreach ($tags_api as $tag) {
            $term = taxonomy_get_term_by_name($tag["name"]);
            if (!count($term) || empty($term)) {
                $term = new stdClass();
                $term->name = $tag["name"];
                $term->vid = variable_get("imx_gcms_field_v_tags", 0);
                taxonomy_term_save($term);
                $tag_list[] = array("tid" => $term->tid);
            } else {
                foreach ($term as $tag) {
                    $tag_list[] = array("tid" => $tag->tid);
                }
            }

        }
        return $tag_list;
    }
}

function prepareVideosFieldCollection($videos, $node)
{
    $field_collection_video = IMX_GCMS_FIELD_VIDEO;
    $field_video_url = IMX_GCMS_FIELD_VIDEO_URL;
    //$field_video_desc = IMX_GCMS_FIELD_VIDEO_DESC;

    $video_items = array();
    if (count($videos)) {
        foreach ($videos as $video) {
            if ($field_collection_video != "NA") {
                $vid = str_replace("/", "", $video["youtube_id"]);
                $vid = str_replace(" ", "", $vid);
                $field_collection_item = entity_create('field_collection_item', array('field_name' => $field_collection_video)); // Create new field collection item.
                $field_collection_item->setHostEntity('node', $node); // Attach it to the node.
                $field_collection_item->{$field_video_url}[LANGUAGE_NONE][0] = array('input' => trim("http://youtu.be/" . trim($vid)), "video_id" => trim($vid));
                $field_collection_item->save(TRUE);
                $id = $field_collection_item->item_id;
                if (isset($field_collection_item->revision_id)) {
                    $video_items[] = array("value" => $id, "revision_id" => $field_collection_item->revision_id);
                } else {
                    $video_items[] = array("value" => $id);
                }
            }
        }
    }

    return $video_items;
}

function prepareVideosEmbed($videos, $node)
{

    $video_items = array();
    if (count($videos)) {
        foreach ($videos as $video) {
            $video_items[] = array("video_url" => $video["video_url"], "embed_code" => NULL, "thumbnail_path" => NULL, "descripcion" => $video["description"], "video_data" => NULL);
        }

        return $video_items;
    }
}

function prepareVideosYoutube($videos, $node)
{
    $video_items = array();
    if (count($videos)) {
        foreach ($videos as $video) {
            $vid = str_replace("/", "", $video["youtube_id"]);
            $vid = str_replace(" ", "", $vid);
            $video_items[] = array('input' => trim("http://youtu.be/" . trim($vid)), "video_id" => trim($vid));
        }
        return $video_items;
    }
}

function prepareRelatedsFieldCollection($node_api, $node, $site = FALSE)
{

    $relateds = array();
    $field_collection_relateds = IMX_GCMS_FIELD_RELATEDS;
    $field_title_related = IMX_GCMS_FIELD_RELATEDS_TITLE;
    $field_url_related = IMX_GCMS_FIELD_RELATEDS_URL;
    $relateds_items = array();

    if (array_key_exists("relateds_by_category", $node_api)) {
        if (count($node_api["relateds_by_category"])) {
            $relateds = $node_api["relateds_by_category"];
        }
    }
    if (array_key_exists("relateds_by_tag", $node_api)) {
        if (count($node_api["relateds_by_tag"])) {
            $relateds = $node_api["relateds_by_tag"];
        }
    }
    if (array_key_exists("relateds_by_node", $node_api)) {
        if (count($node_api["relateds_by_node"])) {
            $relateds = $node_api["relateds_by_node"];
        }
    }

    if (count($relateds)) {
        foreach ($relateds as $rel) {
            if ($field_collection_relateds != "NA") {
                $url = $rel["url"];
                if ($site) {
                    $url = $url . "?gcms_source=true&gcms_site_origin=" . $_SERVER["HTTP_HOST"];
                }
                $field_collection_item = entity_create('field_collection_item', array('field_name' => $field_collection_relateds)); // Create new field collection item.
                $field_collection_item->setHostEntity('node', $node); // Attach it to the node.
                $field_collection_item->{$field_title_related}[LANGUAGE_NONE][0] = array('value' => $rel["title"]);
                $field_collection_item->{$field_url_related}[LANGUAGE_NONE][0] = array('value' => $url);
                $field_collection_item->save(TRUE);
                $id = $field_collection_item->item_id;
                $relateds_items [] = array("value" => $id);
            }
        }
    }

    return $relateds_items;
}

/*
 * Implements batchAPI batch Page().
 */

function batch_transfer_image()
{

    $site = arg(5);
    $id = arg(6);

    $site=getSiteByDns($site);

    $exists_import = imx_gcms_check_item_import($id, $site);
    $operations = array();
    if (!$exists_import) {
            $node_api = getFeedContent($site,$id);
            if (!$node_api["imagen"]) {
                if (!$node_api["gallery"]) {//No hay imagenes que procesar
                    drupal_goto("admin/config/imx_gcms/add/" . $site . "/" . $id);
                }
            }

            $principal = $node_api["imagen"];
            $carrousel= $node_api["imagen-carrousel"];
            $images = $node_api["gallery"];
            $total_images = count($node_api["gallery"]);



            //Imagen principal
            $image_data = array("site" => $site, "id" => $id, "field" => "image", "data" => $principal);
            $operations[] = array('process_image_batch', array($image_data, 1));

            //Imagen Carrousel
            $image_data = array("site" => $site, "id" => $id, "field" => "image", "data" => $carrousel);
            $operations[] = array('process_image_batch', array($image_data, 1));



            //Galerias
            if (count($total_images) && is_array($images)) {
                foreach ($images as $image) {
                    $image_data = array("site" => $site, "id" => $id, "field" => "images", "data" => $image);
                    $operations[] = array('process_image_batch', array($image_data, 1));
                }
            }


            $batch_config = array(
                'title' => t('Transferencia de Imágenes'),
                'operations' => $operations,
                'finished' => 'process_image_finished_batch', // Finished batch callback.
            );


            if (count($operations)) {
                batch_set($batch_config);
                batch_process('batch-demo');
            }
        } else {
            $options = array('absolute' => TRUE);
            $message = t('El contenido que tratas de importar ya esta guardado en este sitio puedes verlo aqui ' . l("puedes verlo aquí", url("/node/{$exists_import}", $options)));
            drupal_set_message($message, "warning");
            drupal_goto("/admin/content/{$site}");
        }
}

/*
 * Implements batchAPI batch process().
 */

function process_image_batch($images, $max, &$context)
{
    global $user;
    $image_data = $images["data"];
    $context['results']["site_data"] = array("site" => $images["site"], "id" => $images["id"]);
    /*
    Set the number of nodes you want to create within a single iteration of the batch. This number
    should be pretty low as it is the reason why we're creating the batch process in the first place.
    */
    $limit = $max;

    /*
    Set the variables that need to persist throughout the batch process. These need to be set inside
    the $context array because that's what persists throughout the process.
    */
    if (!isset($context['sandbox']['progress'])) {
        $context['sandbox']['progress'] = 0;
        $context['sandbox']['title'] = "Transferencia de galerias";
        $context['sandbox']['max'] = $max;
    }

    // Create some new nodes based on current progress and the $limit per page load. It’s important that you get this right otherwise you can potentially get stuck in an infinite loop or the process won’t do what you want it to.
    for ($i = 0; $i < $limit; $i++) {
        if ($context['sandbox']['progress'] < $context['sandbox']['max']) {
            $context['sandbox']['progress']++; // Used to keep track of how many nodes we've already created.
            $context['results']["images"][] = array("url" => $image_data["src"]); // Keep a running tab of all of the nodes created.
            $context['message'] = "Transfiriendo  " . $image_data["src"];
            $file = transfer_image_remote($image_data);

            if (!array_key_exists("description", $image_data)) {
                $image_data["description"] = "";
            }
            $_SESSION["imx_gcms"][$images["site"]][$images["id"]][$images["field"]][] = array("file" => $file, "title" => ($image_data["title"]) ? $image_data["title"] : $image_data["descripcion"], "description" => ($image_data["descripcion"]) ? $image_data["descripcion"] : $image_data["title"]);
        }
    }
    // Check if the batch is finished
    if ($context['sandbox']['progress'] < $context['sandbox'] ['max']) {
        $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    }
}

/*
 * Implements batchAPI batch finish().
 */

function process_image_finished_batch($success, $results, $operations)
{
    if ($success) {
        $message = "Las imagenes han sido transferidas";
    } else {
        $message = t('Hubo errores al procesar las imagenes.');
    }
    drupal_set_message($message);
    drupal_goto("admin/config/imx_gcms/add/" . $results["site_data"]["site"] . "/" . $results["site_data"]["id"]);
}


function imx_gcms_detail_item()
{
    // print_r(node_load(4022));
    $site = arg(4);
    $id = arg(5);
    $repo = arg(6);
    $id_parts = explode("_", $id);
    if (is_numeric($id_parts[0])) {
        $is_hub = TRUE;
    }

    $html = array();
    if (is_string($site) && (is_numeric($id) || $is_hub = TRUE)) {
        if (!$repo) {
            $repo = "node";
        }
        $node_api_url = getAPISiteContentURL($site, $id, "html", $repo);
        $url = "'/admin/config/imx_gcms/prepare/add/{$site}/{$id}/{$repo}'";
        $html[] = '<input type="button" value="Importar contenido" onclick="location.href=' . $url . '"/><br/><br/>';
        $html[] = '<iframe width="1000" height="2000" src="' . $node_api_url . '"style="border: none;height:2000;width:960px;" allowtransparency="allowtransparency" frameborder="0"></iframe>';
        $html[] = '<br/><input type="button" value="Importar contenido" onclick="location.href=' . $url . '"/>';


        return implode("\n", $html);
    } else {
        $message = t('La petición no se ha podido procesar correctamente, intenta nuevamente.');
        drupal_set_message($message, "warning");
        drupal_goto("admin/config/imx_gcms/sites");
    }
}


function imx_gcms_node_form_alter(&$form, &$form_state, $form_id)
{

}

function imx_gcms_form_alter(&$form, &$form_state, $form_id)
{
    global $user;
    if (arg(2) == "imx_gcms" && arg(3) == "add") {
        if ($form_id == 'article_node_form' ||
            $form_id == 'gallerie_node_form' ||
            $form_id == 'gallery_node_form' ||
            $form_id == 'galery_node_form' ||
            $form_id == 'video_node_form' ||
            $form_id == 'videos_node_form' ||
            $form_id == 'videogalery_node_form' ||
            $form_id == 'videogallery_node_form' ||
            $form_id == 'blog_node_form'
        ) {
            $form['actions']['submit']['#submit'][] = 'imx_gcms_node_form_submit';
            $form['author']['name']['#default_value'] = !empty($user->name) ? $user->name : '';
            $form['author']['name']['#default_value'] = !empty($user->name) ? $user->name : '';
        }
    } else {
        if ($form_id == variable_get("imx_gcms_content_article", "article") . "_node_form" || $form_id == variable_get("imx_gcms_content_gallerie", "gallerie") . "_node_form" || $form_id == variable_get("imx_gcms_content_video", "video") . "_node_form") {
            $form['imx_gcms_send_to'] = array(
                '#type' => 'select',
                '#multiple' => 'true',
                '#required' => FALSE,
                '#options' => getAPISites(TRUE),
                '#title' => t("Recomendar a:"),
                '#weight' => count($form) - 10,
                '#size' => 10,
                '#description' => t('Remember that you can select more than one site for recommendations, you just use control+click to do that.'),
            );
        }
    }

    drupal_add_css(drupal_get_path('module', 'imx_gcms') . '/imx_gcms_node_form.css');
}

function imx_gcms_field_widget_form_alter(&$element, &$form_state, $context)
{
    // If this is an image field type
    if ($context['field']['type'] == 'image') {
        // Loop through the element children (there will always be at least one).
        foreach (element_children($element) as $key => $child) {
            // Add the new process function to the element
            $element[$key]['#process'][] = 'imx_gcms_image_field_widget_process';
        }
    }
}

function imx_gcms_image_field_widget_process($element, &$form_state, $form)
{
    // Change the title field to a textarea
    $element['alt']['#title'] = 'Titulo/Descripción de la imagen';
    $element['title']['#title'] = 'Autoría/derechos de la imagen';
    // Return the altered element
    return $element;
}

/**
 * Custom submit function.
 *
 */
function imx_gcms_node_form_submit($form, &$form_state)
{
    global $user;
    $node_log = array();
    $node_log["site_src"] = arg(4);
    $node_log["id_src"] = arg(5);
    $node_log["site_dst"] = $_SERVER["HTTP_HOST"];
    $node_log["id_dst"] = $form_state["values"]["nid"];
    $node_log["timestamp"] = $form_state["values"]["created"];
    $node_log["publisher"] = array("name" => $user->name, "mail" => $user->mail);
    if (!is_numeric($node_log["id_src"])) {
        $node_video_copy = $node_log;
        $node_log["id_src"] = crc32($node_log["id_src"]);
    }
    $fields = array("id_source" => $node_log["id_src"], "id_dst" => $node_log["id_dst"], "site_src" => $node_log["site_src"], "created" => time(), "uid" => $user->uid);

    $node_form = $form["#node"];
    $node = node_load($form_state["values"]["nid"]);
    //Asignamos el datos de rastreo via GCMS
    $node->field_gcms[LANGUAGE_NONE][0]["value"] = "1";
    $node->field_gcms_id_source[LANGUAGE_NONE][0]["value"] = $node_form->field_gcms_id_source["und"][0]["value"];
    $node->field_gcms_site_source[LANGUAGE_NONE][0]["value"] = $node_form->field_gcms_site_source["und"][0]["value"];
    $node->field_gcms_title_source[LANGUAGE_NONE][0]["value"] = $node_form->field_gcms_title_source["und"][0]["value"];
    $node->field_gcms_url_source[LANGUAGE_NONE][0]["value"] = $node_form->field_gcms_url_source["und"][0]["value"];

    node_save($node);
    imx_gcms_insert_history_import($fields);

}

function imx_gcms_html_head_alter(&$head)
{
    if (variable_get("imx_gcms_rewrite_url", FALSE)) {
        if (arg(0) == 'node' && is_numeric(arg(1)) && !arg(2)) {
            $node = menu_get_object();
            $site = $node->field_gcms_site_source['und'][0]['value'];
            if ($node && $site != 'inventmx') {
                if (isset($node->field_gcms_url_source['und'][0]['value'])) {
                    $gcms_src_url = $node->field_gcms_url_source['und'][0]['value'];
                    if ($gcms_src_url) {
                        #$head['metatag_og:url_0']['#value'] = $gcms_src_url;
                        $head['metatag_canonical']['#value'] = $gcms_src_url;
                        $head['metatag_canonical']['#attached']['drupal_add_http_header'][0][1] = '<' . $gcms_src_url . '>; rel="canonical"';
                    }
                }
            }
        }
    }
}

function imx_gcms_ciudad()
{
    drupal_add_css(drupal_get_path('module', 'imx_gcms') . '/imx_gcms.css');

    $head_links[] = "<div class='imx-gcms-nav-menu'>";
    $head_links[] = "<div class='header-links '>" . l("Contenidos importados", "admin/config/imx_gcms/recs/imports", array("attributes" => array("target" => "_blank", "style" => "float: left;margin: 0 20px 20px 0;"))) . "</div>";
    $head_links[] = "</div>";

    $site=getSite(arg(2));
    $data = getFeedContents($site);

    $rows = array();
    foreach ($data as $node) {
        if (true) {
            $rows[] = array(
                l($node["title"], $node["url"], array("attributes" => array("target" => "_blank"))),
                $node["tipo"],
                date("h:i:s d-m-y", $node["created"]),
                $node["category"],
                l("Importar", "admin/config/imx_gcms/prepare/add/{$site}/{$node['id']}"),
            );
        }
    }
    $table = array(
        'header' => array(
            t('Titulo'),
            t('Tipo'),
            t('Fecha'),
            t('Categoría'),
            t('')
        ),
        'rows' => $rows,
        'sticky' => FALSE,
        "attributes" => array("class" => "gcms-table"),
    );
    return implode($head_links, "") . theme('table', $table, array('class' => 'no-sticky'));
}

